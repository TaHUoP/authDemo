/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package authDemo.controllers;

import authDemo.controllers.api.CreateUserRequest;
import authDemo.controllers.api.UpdateUserRequest;
import authDemo.dto.UserDTO;
import authDemo.models.User;
import authDemo.repositories.UserRepository;
import org.bson.types.ObjectId;
import org.modelmapper.ModelMapper;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import javax.validation.Valid;
import java.util.List;
import java.util.stream.Collectors;

@RestController
public class UserController {

    private final UserRepository repository;
    private final ModelMapper modelMapper;

    public UserController(UserRepository repository, ModelMapper modelMapper) {
        this.repository = repository;
        this.modelMapper = modelMapper;
    }

    @GetMapping("/users")
    public List<UserDTO> getUsers() {
        List<UserDTO> users = repository.findAll()
                .stream()
                .map(user -> modelMapper.map(user, UserDTO.class))
                .collect(Collectors.toList());

        if (users.isEmpty())
            throw new ResponseStatusException(HttpStatus.NO_CONTENT);
        else
            return users;
    }

    @GetMapping("/users/{id}")
    public UserDTO getUser(@PathVariable ObjectId id) {
        User user = repository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User Not Found"));

        return modelMapper.map(user, UserDTO.class);
    }

    @PostMapping("/users")
    @ResponseStatus(HttpStatus.CREATED)
    public UserDTO createUser(@Valid @RequestBody CreateUserRequest request) {
        return modelMapper.map(
                repository.save(request.createUser()),
                UserDTO.class
        );
    }

    @PutMapping("/users/{id}")
    public UserDTO updateUser(@PathVariable ObjectId id, @Valid @RequestBody UpdateUserRequest request) {
        User user = repository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User Not Found"));

        request.populateUser(user);

        return modelMapper.map(
            repository.save(user),
            UserDTO.class
        );
    }

    @DeleteMapping("/users/{id}")
    public void deleteUser(@PathVariable ObjectId id) {
        Long deletedCount = repository.deleteUserById(id);

        if (deletedCount < 1)
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
    }

}